#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="xprema_bero")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertUserPermession(UserPermession instance);
    partial void UpdateUserPermession(UserPermession instance);
    partial void DeleteUserPermession(UserPermession instance);
    partial void InsertAccountCategory(AccountCategory instance);
    partial void UpdateAccountCategory(AccountCategory instance);
    partial void DeleteAccountCategory(AccountCategory instance);
    partial void InsertAccountDaily(AccountDaily instance);
    partial void UpdateAccountDaily(AccountDaily instance);
    partial void DeleteAccountDaily(AccountDaily instance);
    partial void InsertExpenss(Expenss instance);
    partial void UpdateExpenss(Expenss instance);
    partial void DeleteExpenss(Expenss instance);
    partial void InsertExpenssesMovment(ExpenssesMovment instance);
    partial void UpdateExpenssesMovment(ExpenssesMovment instance);
    partial void DeleteExpenssesMovment(ExpenssesMovment instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertHolyDay(HolyDay instance);
    partial void UpdateHolyDay(HolyDay instance);
    partial void DeleteHolyDay(HolyDay instance);
    partial void InsertBulidItem(BulidItem instance);
    partial void UpdateBulidItem(BulidItem instance);
    partial void DeleteBulidItem(BulidItem instance);
    partial void InsertProjectAttachment(ProjectAttachment instance);
    partial void UpdateProjectAttachment(ProjectAttachment instance);
    partial void DeleteProjectAttachment(ProjectAttachment instance);
    partial void InsertProjectExpenss(ProjectExpenss instance);
    partial void UpdateProjectExpenss(ProjectExpenss instance);
    partial void DeleteProjectExpenss(ProjectExpenss instance);
    partial void InsertProjectInstallment(ProjectInstallment instance);
    partial void UpdateProjectInstallment(ProjectInstallment instance);
    partial void DeleteProjectInstallment(ProjectInstallment instance);
    partial void InsertprojectLevel(projectLevel instance);
    partial void UpdateprojectLevel(projectLevel instance);
    partial void DeleteprojectLevel(projectLevel instance);
    partial void InsertprojectLevelSell(projectLevelSell instance);
    partial void UpdateprojectLevelSell(projectLevelSell instance);
    partial void DeleteprojectLevelSell(projectLevelSell instance);
    partial void InsertProjectProfile(ProjectProfile instance);
    partial void UpdateProjectProfile(ProjectProfile instance);
    partial void DeleteProjectProfile(ProjectProfile instance);
    partial void InsertProjectQuantity(ProjectQuantity instance);
    partial void UpdateProjectQuantity(ProjectQuantity instance);
    partial void DeleteProjectQuantity(ProjectQuantity instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertSystemPermession(SystemPermession instance);
    partial void UpdateSystemPermession(SystemPermession instance);
    partial void DeleteSystemPermession(SystemPermession instance);
    partial void InsertSystemUser(SystemUser instance);
    partial void UpdateSystemUser(SystemUser instance);
    partial void DeleteSystemUser(SystemUser instance);
    #endregion
		
		public dbDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.xprema_beroConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<UserPermession> UserPermessions
		{
			get
			{
				return this.GetTable<UserPermession>();
			}
		}
		
		public System.Data.Linq.Table<AccountCategory> AccountCategories
		{
			get
			{
				return this.GetTable<AccountCategory>();
			}
		}
		
		public System.Data.Linq.Table<AccountDaily> AccountDailies
		{
			get
			{
				return this.GetTable<AccountDaily>();
			}
		}
		
		public System.Data.Linq.Table<Expenss> Expensses
		{
			get
			{
				return this.GetTable<Expenss>();
			}
		}
		
		public System.Data.Linq.Table<ExpenssesMovment> ExpenssesMovments
		{
			get
			{
				return this.GetTable<ExpenssesMovment>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<HolyDay> HolyDays
		{
			get
			{
				return this.GetTable<HolyDay>();
			}
		}
		
		public System.Data.Linq.Table<BulidItem> BulidItems
		{
			get
			{
				return this.GetTable<BulidItem>();
			}
		}
		
		public System.Data.Linq.Table<ProjectAttachment> ProjectAttachments
		{
			get
			{
				return this.GetTable<ProjectAttachment>();
			}
		}
		
		public System.Data.Linq.Table<ProjectExpenss> ProjectExpensses
		{
			get
			{
				return this.GetTable<ProjectExpenss>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInstallment> ProjectInstallments
		{
			get
			{
				return this.GetTable<ProjectInstallment>();
			}
		}
		
		public System.Data.Linq.Table<projectLevel> projectLevels
		{
			get
			{
				return this.GetTable<projectLevel>();
			}
		}
		
		public System.Data.Linq.Table<projectLevelSell> projectLevelSells
		{
			get
			{
				return this.GetTable<projectLevelSell>();
			}
		}
		
		public System.Data.Linq.Table<ProjectProfile> ProjectProfiles
		{
			get
			{
				return this.GetTable<ProjectProfile>();
			}
		}
		
		public System.Data.Linq.Table<ProjectQuantity> ProjectQuantities
		{
			get
			{
				return this.GetTable<ProjectQuantity>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<SystemPermession> SystemPermessions
		{
			get
			{
				return this.GetTable<SystemPermession>();
			}
		}
		
		public System.Data.Linq.Table<SystemUser> SystemUsers
		{
			get
			{
				return this.GetTable<SystemUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AccountName;
		
		private string _Description;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<AccountDaily> _AccountDailies;
		
		private EntitySet<Expenss> _Expensses;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<ProjectProfile> _ProjectProfiles;
		
		private EntityRef<AccountCategory> _AccountCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public Account()
		{
			this._AccountDailies = new EntitySet<AccountDaily>(new Action<AccountDaily>(this.attach_AccountDailies), new Action<AccountDaily>(this.detach_AccountDailies));
			this._Expensses = new EntitySet<Expenss>(new Action<Expenss>(this.attach_Expensses), new Action<Expenss>(this.detach_Expensses));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._ProjectProfiles = new EntitySet<ProjectProfile>(new Action<ProjectProfile>(this.attach_ProjectProfiles), new Action<ProjectProfile>(this.detach_ProjectProfiles));
			this._AccountCategory = default(EntityRef<AccountCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._AccountCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountDaily", Storage="_AccountDailies", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<AccountDaily> AccountDailies
		{
			get
			{
				return this._AccountDailies;
			}
			set
			{
				this._AccountDailies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Expenss", Storage="_Expensses", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<Expenss> Expensses
		{
			get
			{
				return this._Expensses;
			}
			set
			{
				this._Expensses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Customers", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_ProjectProfile", Storage="_ProjectProfiles", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<ProjectProfile> ProjectProfiles
		{
			get
			{
				return this._ProjectProfiles;
			}
			set
			{
				this._ProjectProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCategory_Account", Storage="_AccountCategory", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true)]
		public AccountCategory AccountCategory
		{
			get
			{
				return this._AccountCategory.Entity;
			}
			set
			{
				AccountCategory previousValue = this._AccountCategory.Entity;
				if (((previousValue != value) 
							|| (this._AccountCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCategory.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountCategory.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._CategoryID = value.ID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccountCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountDailies(AccountDaily entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountDailies(AccountDaily entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Expensses(Expenss entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Expensses(Expenss entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_ProjectProfiles(ProjectProfile entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_ProjectProfiles(ProjectProfile entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.UserPermession")]
	public partial class UserPermession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _SystemUserID;
		
		private System.Nullable<int> _SystemPermessionID;
		
		private string _PermessionValue;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<SystemPermession> _SystemPermession;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSystemUserIDChanging(System.Nullable<int> value);
    partial void OnSystemUserIDChanged();
    partial void OnSystemPermessionIDChanging(System.Nullable<int> value);
    partial void OnSystemPermessionIDChanged();
    partial void OnPermessionValueChanging(string value);
    partial void OnPermessionValueChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public UserPermession()
		{
			this._SystemPermession = default(EntityRef<SystemPermession>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserID", DbType="Int")]
		public System.Nullable<int> SystemUserID
		{
			get
			{
				return this._SystemUserID;
			}
			set
			{
				if ((this._SystemUserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemUserIDChanging(value);
					this.SendPropertyChanging();
					this._SystemUserID = value;
					this.SendPropertyChanged("SystemUserID");
					this.OnSystemUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemPermessionID", DbType="Int")]
		public System.Nullable<int> SystemPermessionID
		{
			get
			{
				return this._SystemPermessionID;
			}
			set
			{
				if ((this._SystemPermessionID != value))
				{
					if (this._SystemPermession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemPermessionIDChanging(value);
					this.SendPropertyChanging();
					this._SystemPermessionID = value;
					this.SendPropertyChanged("SystemPermessionID");
					this.OnSystemPermessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionValue", DbType="NVarChar(MAX)")]
		public string PermessionValue
		{
			get
			{
				return this._PermessionValue;
			}
			set
			{
				if ((this._PermessionValue != value))
				{
					this.OnPermessionValueChanging(value);
					this.SendPropertyChanging();
					this._PermessionValue = value;
					this.SendPropertyChanged("PermessionValue");
					this.OnPermessionValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemPermession_UserPermession", Storage="_SystemPermession", ThisKey="SystemPermessionID", OtherKey="ID", IsForeignKey=true)]
		public SystemPermession SystemPermession
		{
			get
			{
				return this._SystemPermession.Entity;
			}
			set
			{
				SystemPermession previousValue = this._SystemPermession.Entity;
				if (((previousValue != value) 
							|| (this._SystemPermession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemPermession.Entity = null;
						previousValue.UserPermessions.Remove(this);
					}
					this._SystemPermession.Entity = value;
					if ((value != null))
					{
						value.UserPermessions.Add(this);
						this._SystemPermessionID = value.ID;
					}
					else
					{
						this._SystemPermessionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemPermession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_UserPermession", Storage="_SystemUser", ThisKey="SystemUserID", OtherKey="ID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.UserPermessions.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.UserPermessions.Add(this);
						this._SystemUserID = value.ID;
					}
					else
					{
						this._SystemUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.AccountCategory")]
	public partial class AccountCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AccountCategoryName;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountCategoryNameChanging(string value);
    partial void OnAccountCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public AccountCategory()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountCategoryName", DbType="NVarChar(50)")]
		public string AccountCategoryName
		{
			get
			{
				return this._AccountCategoryName;
			}
			set
			{
				if ((this._AccountCategoryName != value))
				{
					this.OnAccountCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._AccountCategoryName = value;
					this.SendPropertyChanged("AccountCategoryName");
					this.OnAccountCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCategory_Account", Storage="_Accounts", ThisKey="ID", OtherKey="CategoryID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountCategory = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.AccountDaily")]
	public partial class AccountDaily : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AccountID;
		
		private System.Nullable<double> _TotalIn;
		
		private System.Nullable<double> _TotalOut;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private string _Description;
		
		private string _CommandArg;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnTotalInChanging(System.Nullable<double> value);
    partial void OnTotalInChanged();
    partial void OnTotalOutChanging(System.Nullable<double> value);
    partial void OnTotalOutChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommandArgChanging(string value);
    partial void OnCommandArgChanged();
    #endregion
		
		public AccountDaily()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalIn", DbType="Float")]
		public System.Nullable<double> TotalIn
		{
			get
			{
				return this._TotalIn;
			}
			set
			{
				if ((this._TotalIn != value))
				{
					this.OnTotalInChanging(value);
					this.SendPropertyChanging();
					this._TotalIn = value;
					this.SendPropertyChanged("TotalIn");
					this.OnTotalInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalOut", DbType="Float")]
		public System.Nullable<double> TotalOut
		{
			get
			{
				return this._TotalOut;
			}
			set
			{
				if ((this._TotalOut != value))
				{
					this.OnTotalOutChanging(value);
					this.SendPropertyChanging();
					this._TotalOut = value;
					this.SendPropertyChanged("TotalOut");
					this.OnTotalOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandArg", DbType="NVarChar(50)")]
		public string CommandArg
		{
			get
			{
				return this._CommandArg;
			}
			set
			{
				if ((this._CommandArg != value))
				{
					this.OnCommandArgChanging(value);
					this.SendPropertyChanging();
					this._CommandArg = value;
					this.SendPropertyChanged("CommandArg");
					this.OnCommandArgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountDaily", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountDailies.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountDailies.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.Expensses")]
	public partial class Expenss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ExpenssesName;
		
		private string _Description;
		
		private System.Nullable<int> _AccountID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<ExpenssesMovment> _ExpenssesMovments;
		
		private EntitySet<ProjectExpenss> _ProjectExpensses;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesNameChanging(string value);
    partial void OnExpenssesNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public Expenss()
		{
			this._ExpenssesMovments = new EntitySet<ExpenssesMovment>(new Action<ExpenssesMovment>(this.attach_ExpenssesMovments), new Action<ExpenssesMovment>(this.detach_ExpenssesMovments));
			this._ProjectExpensses = new EntitySet<ProjectExpenss>(new Action<ProjectExpenss>(this.attach_ProjectExpensses), new Action<ProjectExpenss>(this.detach_ProjectExpensses));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesName", DbType="NVarChar(50)")]
		public string ExpenssesName
		{
			get
			{
				return this._ExpenssesName;
			}
			set
			{
				if ((this._ExpenssesName != value))
				{
					this.OnExpenssesNameChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesName = value;
					this.SendPropertyChanged("ExpenssesName");
					this.OnExpenssesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesMovment", Storage="_ExpenssesMovments", ThisKey="ID", OtherKey="ExpenssesID")]
		public EntitySet<ExpenssesMovment> ExpenssesMovments
		{
			get
			{
				return this._ExpenssesMovments;
			}
			set
			{
				this._ExpenssesMovments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ProjectExpenss", Storage="_ProjectExpensses", ThisKey="ID", OtherKey="ExpenssesID")]
		public EntitySet<ProjectExpenss> ProjectExpensses
		{
			get
			{
				return this._ProjectExpensses;
			}
			set
			{
				this._ProjectExpensses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Expenss", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Expensses.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Expensses.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpenssesMovments(ExpenssesMovment entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = this;
		}
		
		private void detach_ExpenssesMovments(ExpenssesMovment entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = null;
		}
		
		private void attach_ProjectExpensses(ProjectExpenss entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = this;
		}
		
		private void detach_ProjectExpensses(ProjectExpenss entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.ExpenssesMovment")]
	public partial class ExpenssesMovment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ExpenssesID;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<Expenss> _Expenss;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesIDChanging(System.Nullable<int> value);
    partial void OnExpenssesIDChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public ExpenssesMovment()
		{
			this._Expenss = default(EntityRef<Expenss>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesID", DbType="Int")]
		public System.Nullable<int> ExpenssesID
		{
			get
			{
				return this._ExpenssesID;
			}
			set
			{
				if ((this._ExpenssesID != value))
				{
					if (this._Expenss.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpenssesIDChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesID = value;
					this.SendPropertyChanged("ExpenssesID");
					this.OnExpenssesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesMovment", Storage="_Expenss", ThisKey="ExpenssesID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Expenss Expenss
		{
			get
			{
				return this._Expenss.Entity;
			}
			set
			{
				Expenss previousValue = this._Expenss.Entity;
				if (((previousValue != value) 
							|| (this._Expenss.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expenss.Entity = null;
						previousValue.ExpenssesMovments.Remove(this);
					}
					this._Expenss.Entity = value;
					if ((value != null))
					{
						value.ExpenssesMovments.Add(this);
						this._ExpenssesID = value.ID;
					}
					else
					{
						this._ExpenssesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expenss");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CustomerName;
		
		private string _PhoneNumber;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _No_building;
		
		private string _No_permissibility;
		
		private System.Nullable<int> _AccountID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<ProjectProfile> _ProjectProfiles;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnNo_buildingChanging(string value);
    partial void OnNo_buildingChanged();
    partial void OnNo_permissibilityChanging(string value);
    partial void OnNo_permissibilityChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public Customer()
		{
			this._ProjectProfiles = new EntitySet<ProjectProfile>(new Action<ProjectProfile>(this.attach_ProjectProfiles), new Action<ProjectProfile>(this.detach_ProjectProfiles));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(50)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No_building", DbType="NVarChar(500)")]
		public string No_building
		{
			get
			{
				return this._No_building;
			}
			set
			{
				if ((this._No_building != value))
				{
					this.OnNo_buildingChanging(value);
					this.SendPropertyChanging();
					this._No_building = value;
					this.SendPropertyChanged("No_building");
					this.OnNo_buildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No_permissibility", DbType="NVarChar(500)")]
		public string No_permissibility
		{
			get
			{
				return this._No_permissibility;
			}
			set
			{
				if ((this._No_permissibility != value))
				{
					this.OnNo_permissibilityChanging(value);
					this.SendPropertyChanging();
					this._No_permissibility = value;
					this.SendPropertyChanged("No_permissibility");
					this.OnNo_permissibilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier", IsDbGenerated=true)]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ProjectProfile", Storage="_ProjectProfiles", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<ProjectProfile> ProjectProfiles
		{
			get
			{
				return this._ProjectProfiles;
			}
			set
			{
				this._ProjectProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectProfiles(ProjectProfile entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ProjectProfiles(ProjectProfile entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="emp.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _EmployeeName;
		
		private string _nationalty;
		
		private string _PassportNumber;
		
		private System.Nullable<System.DateTime> _PassportExpierdDate;
		
		private string _peronaltyNumber;
		
		private System.Nullable<System.DateTime> _personaltyExpiredDate;
		
		private System.Nullable<double> _Salary;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private string _Status;
		
		private EntitySet<HolyDay> _HolyDays;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnnationaltyChanging(string value);
    partial void OnnationaltyChanged();
    partial void OnPassportNumberChanging(string value);
    partial void OnPassportNumberChanged();
    partial void OnPassportExpierdDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPassportExpierdDateChanged();
    partial void OnperonaltyNumberChanging(string value);
    partial void OnperonaltyNumberChanged();
    partial void OnpersonaltyExpiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpersonaltyExpiredDateChanged();
    partial void OnSalaryChanging(System.Nullable<double> value);
    partial void OnSalaryChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Employee()
		{
			this._HolyDays = new EntitySet<HolyDay>(new Action<HolyDay>(this.attach_HolyDays), new Action<HolyDay>(this.detach_HolyDays));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(50)")]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationalty", DbType="NVarChar(50)")]
		public string nationalty
		{
			get
			{
				return this._nationalty;
			}
			set
			{
				if ((this._nationalty != value))
				{
					this.OnnationaltyChanging(value);
					this.SendPropertyChanging();
					this._nationalty = value;
					this.SendPropertyChanged("nationalty");
					this.OnnationaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassportNumber", DbType="NVarChar(500)")]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassportExpierdDate", DbType="Date")]
		public System.Nullable<System.DateTime> PassportExpierdDate
		{
			get
			{
				return this._PassportExpierdDate;
			}
			set
			{
				if ((this._PassportExpierdDate != value))
				{
					this.OnPassportExpierdDateChanging(value);
					this.SendPropertyChanging();
					this._PassportExpierdDate = value;
					this.SendPropertyChanged("PassportExpierdDate");
					this.OnPassportExpierdDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_peronaltyNumber", DbType="NVarChar(500)")]
		public string peronaltyNumber
		{
			get
			{
				return this._peronaltyNumber;
			}
			set
			{
				if ((this._peronaltyNumber != value))
				{
					this.OnperonaltyNumberChanging(value);
					this.SendPropertyChanging();
					this._peronaltyNumber = value;
					this.SendPropertyChanged("peronaltyNumber");
					this.OnperonaltyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personaltyExpiredDate", DbType="Date")]
		public System.Nullable<System.DateTime> personaltyExpiredDate
		{
			get
			{
				return this._personaltyExpiredDate;
			}
			set
			{
				if ((this._personaltyExpiredDate != value))
				{
					this.OnpersonaltyExpiredDateChanging(value);
					this.SendPropertyChanging();
					this._personaltyExpiredDate = value;
					this.SendPropertyChanged("personaltyExpiredDate");
					this.OnpersonaltyExpiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Float")]
		public System.Nullable<double> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HolyDay", Storage="_HolyDays", ThisKey="id", OtherKey="EmployeeID")]
		public EntitySet<HolyDay> HolyDays
		{
			get
			{
				return this._HolyDays;
			}
			set
			{
				this._HolyDays.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HolyDays(HolyDay entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_HolyDays(HolyDay entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="emp.HolyDay")]
	public partial class HolyDay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _fromDate;
		
		private System.Nullable<System.DateTime> _ToDatetime;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _commint;
		
		private string _status;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnfromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnfromDateChanged();
    partial void OnToDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnToDatetimeChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OncommintChanging(string value);
    partial void OncommintChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public HolyDay()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> fromDate
		{
			get
			{
				return this._fromDate;
			}
			set
			{
				if ((this._fromDate != value))
				{
					this.OnfromDateChanging(value);
					this.SendPropertyChanging();
					this._fromDate = value;
					this.SendPropertyChanged("fromDate");
					this.OnfromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDatetime
		{
			get
			{
				return this._ToDatetime;
			}
			set
			{
				if ((this._ToDatetime != value))
				{
					this.OnToDatetimeChanging(value);
					this.SendPropertyChanging();
					this._ToDatetime = value;
					this.SendPropertyChanged("ToDatetime");
					this.OnToDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commint", DbType="NVarChar(MAX)")]
		public string commint
		{
			get
			{
				return this._commint;
			}
			set
			{
				if ((this._commint != value))
				{
					this.OncommintChanging(value);
					this.SendPropertyChanging();
					this._commint = value;
					this.SendPropertyChanged("commint");
					this.OncommintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_HolyDay", Storage="_Employee", ThisKey="EmployeeID", OtherKey="id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.HolyDays.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.HolyDays.Add(this);
						this._EmployeeID = value.id;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.BulidItem")]
	public partial class BulidItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ItemName;
		
		private string _ItemDescription;
		
		private string _ItemSummery;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<ProjectQuantity> _ProjectQuantities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemDescriptionChanging(string value);
    partial void OnItemDescriptionChanged();
    partial void OnItemSummeryChanging(string value);
    partial void OnItemSummeryChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public BulidItem()
		{
			this._ProjectQuantities = new EntitySet<ProjectQuantity>(new Action<ProjectQuantity>(this.attach_ProjectQuantities), new Action<ProjectQuantity>(this.detach_ProjectQuantities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDescription", DbType="NVarChar(MAX)")]
		public string ItemDescription
		{
			get
			{
				return this._ItemDescription;
			}
			set
			{
				if ((this._ItemDescription != value))
				{
					this.OnItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ItemDescription = value;
					this.SendPropertyChanged("ItemDescription");
					this.OnItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSummery", DbType="NVarChar(50)")]
		public string ItemSummery
		{
			get
			{
				return this._ItemSummery;
			}
			set
			{
				if ((this._ItemSummery != value))
				{
					this.OnItemSummeryChanging(value);
					this.SendPropertyChanging();
					this._ItemSummery = value;
					this.SendPropertyChanged("ItemSummery");
					this.OnItemSummeryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BulidItem_ProjectQuantity", Storage="_ProjectQuantities", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<ProjectQuantity> ProjectQuantities
		{
			get
			{
				return this._ProjectQuantities;
			}
			set
			{
				this._ProjectQuantities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectQuantities(ProjectQuantity entity)
		{
			this.SendPropertyChanging();
			entity.BulidItem = this;
		}
		
		private void detach_ProjectQuantities(ProjectQuantity entity)
		{
			this.SendPropertyChanging();
			entity.BulidItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.ProjectAttachment")]
	public partial class ProjectAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _FileName;
		
		private string _FilePath;
		
		private System.Data.Linq.Binary _FileContent;
		
		private System.Nullable<int> _ProjectProfileID;
		
		private EntityRef<ProjectProfile> _ProjectProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileContentChanging(System.Data.Linq.Binary value);
    partial void OnFileContentChanged();
    partial void OnProjectProfileIDChanging(System.Nullable<int> value);
    partial void OnProjectProfileIDChanged();
    #endregion
		
		public ProjectAttachment()
		{
			this._ProjectProfile = default(EntityRef<ProjectProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(50)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(MAX)")]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileContent", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FileContent
		{
			get
			{
				return this._FileContent;
			}
			set
			{
				if ((this._FileContent != value))
				{
					this.OnFileContentChanging(value);
					this.SendPropertyChanging();
					this._FileContent = value;
					this.SendPropertyChanged("FileContent");
					this.OnFileContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectProfileID", DbType="Int")]
		public System.Nullable<int> ProjectProfileID
		{
			get
			{
				return this._ProjectProfileID;
			}
			set
			{
				if ((this._ProjectProfileID != value))
				{
					if (this._ProjectProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectProfileID = value;
					this.SendPropertyChanged("ProjectProfileID");
					this.OnProjectProfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectProfile_ProjectAttachment", Storage="_ProjectProfile", ThisKey="ProjectProfileID", OtherKey="ID", IsForeignKey=true)]
		public ProjectProfile ProjectProfile
		{
			get
			{
				return this._ProjectProfile.Entity;
			}
			set
			{
				ProjectProfile previousValue = this._ProjectProfile.Entity;
				if (((previousValue != value) 
							|| (this._ProjectProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectProfile.Entity = null;
						previousValue.ProjectAttachments.Remove(this);
					}
					this._ProjectProfile.Entity = value;
					if ((value != null))
					{
						value.ProjectAttachments.Add(this);
						this._ProjectProfileID = value.ID;
					}
					else
					{
						this._ProjectProfileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.ProjectExpensses")]
	public partial class ProjectExpenss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ExpenssesID;
		
		private System.Nullable<double> _Amount;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _dateOfExpensses;
		
		private System.Nullable<int> _ProjectLevelID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<Expenss> _Expenss;
		
		private EntityRef<projectLevel> _projectLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesIDChanging(System.Nullable<int> value);
    partial void OnExpenssesIDChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OndateOfExpenssesChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfExpenssesChanged();
    partial void OnProjectLevelIDChanging(System.Nullable<int> value);
    partial void OnProjectLevelIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public ProjectExpenss()
		{
			this._Expenss = default(EntityRef<Expenss>);
			this._projectLevel = default(EntityRef<projectLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesID", DbType="Int")]
		public System.Nullable<int> ExpenssesID
		{
			get
			{
				return this._ExpenssesID;
			}
			set
			{
				if ((this._ExpenssesID != value))
				{
					if (this._Expenss.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpenssesIDChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesID = value;
					this.SendPropertyChanged("ExpenssesID");
					this.OnExpenssesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfExpensses", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateOfExpensses
		{
			get
			{
				return this._dateOfExpensses;
			}
			set
			{
				if ((this._dateOfExpensses != value))
				{
					this.OndateOfExpenssesChanging(value);
					this.SendPropertyChanging();
					this._dateOfExpensses = value;
					this.SendPropertyChanged("dateOfExpensses");
					this.OndateOfExpenssesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectLevelID", DbType="Int")]
		public System.Nullable<int> ProjectLevelID
		{
			get
			{
				return this._ProjectLevelID;
			}
			set
			{
				if ((this._ProjectLevelID != value))
				{
					if (this._projectLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectLevelIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectLevelID = value;
					this.SendPropertyChanged("ProjectLevelID");
					this.OnProjectLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ProjectExpenss", Storage="_Expenss", ThisKey="ExpenssesID", OtherKey="ID", IsForeignKey=true)]
		public Expenss Expenss
		{
			get
			{
				return this._Expenss.Entity;
			}
			set
			{
				Expenss previousValue = this._Expenss.Entity;
				if (((previousValue != value) 
							|| (this._Expenss.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expenss.Entity = null;
						previousValue.ProjectExpensses.Remove(this);
					}
					this._Expenss.Entity = value;
					if ((value != null))
					{
						value.ProjectExpensses.Add(this);
						this._ExpenssesID = value.ID;
					}
					else
					{
						this._ExpenssesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expenss");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projectLevel_ProjectExpenss", Storage="_projectLevel", ThisKey="ProjectLevelID", OtherKey="id", IsForeignKey=true)]
		public projectLevel projectLevel
		{
			get
			{
				return this._projectLevel.Entity;
			}
			set
			{
				projectLevel previousValue = this._projectLevel.Entity;
				if (((previousValue != value) 
							|| (this._projectLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._projectLevel.Entity = null;
						previousValue.ProjectExpensses.Remove(this);
					}
					this._projectLevel.Entity = value;
					if ((value != null))
					{
						value.ProjectExpensses.Add(this);
						this._ProjectLevelID = value.id;
					}
					else
					{
						this._ProjectLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("projectLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.ProjectInstallment")]
	public partial class ProjectInstallment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Installments_name;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.DateTime> _DateOfInstallments;
		
		private System.Nullable<int> _ProjectLevelID;
		
		private string _ActiveStatus;
		
		private string _PayBy;
		
		private string _PayDescription;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<projectLevel> _projectLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnInstallments_nameChanging(string value);
    partial void OnInstallments_nameChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDateOfInstallmentsChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfInstallmentsChanged();
    partial void OnProjectLevelIDChanging(System.Nullable<int> value);
    partial void OnProjectLevelIDChanged();
    partial void OnActiveStatusChanging(string value);
    partial void OnActiveStatusChanged();
    partial void OnPayByChanging(string value);
    partial void OnPayByChanged();
    partial void OnPayDescriptionChanging(string value);
    partial void OnPayDescriptionChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public ProjectInstallment()
		{
			this._projectLevel = default(EntityRef<projectLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Installments_name", DbType="NVarChar(50)")]
		public string Installments_name
		{
			get
			{
				return this._Installments_name;
			}
			set
			{
				if ((this._Installments_name != value))
				{
					this.OnInstallments_nameChanging(value);
					this.SendPropertyChanging();
					this._Installments_name = value;
					this.SendPropertyChanged("Installments_name");
					this.OnInstallments_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfInstallments", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfInstallments
		{
			get
			{
				return this._DateOfInstallments;
			}
			set
			{
				if ((this._DateOfInstallments != value))
				{
					this.OnDateOfInstallmentsChanging(value);
					this.SendPropertyChanging();
					this._DateOfInstallments = value;
					this.SendPropertyChanged("DateOfInstallments");
					this.OnDateOfInstallmentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectLevelID", DbType="Int")]
		public System.Nullable<int> ProjectLevelID
		{
			get
			{
				return this._ProjectLevelID;
			}
			set
			{
				if ((this._ProjectLevelID != value))
				{
					if (this._projectLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectLevelIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectLevelID = value;
					this.SendPropertyChanged("ProjectLevelID");
					this.OnProjectLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveStatus", DbType="NVarChar(50)")]
		public string ActiveStatus
		{
			get
			{
				return this._ActiveStatus;
			}
			set
			{
				if ((this._ActiveStatus != value))
				{
					this.OnActiveStatusChanging(value);
					this.SendPropertyChanging();
					this._ActiveStatus = value;
					this.SendPropertyChanged("ActiveStatus");
					this.OnActiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayBy", DbType="NVarChar(50)")]
		public string PayBy
		{
			get
			{
				return this._PayBy;
			}
			set
			{
				if ((this._PayBy != value))
				{
					this.OnPayByChanging(value);
					this.SendPropertyChanging();
					this._PayBy = value;
					this.SendPropertyChanged("PayBy");
					this.OnPayByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayDescription", DbType="NVarChar(MAX)")]
		public string PayDescription
		{
			get
			{
				return this._PayDescription;
			}
			set
			{
				if ((this._PayDescription != value))
				{
					this.OnPayDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PayDescription = value;
					this.SendPropertyChanged("PayDescription");
					this.OnPayDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projectLevel_ProjectInstallment", Storage="_projectLevel", ThisKey="ProjectLevelID", OtherKey="id", IsForeignKey=true)]
		public projectLevel projectLevel
		{
			get
			{
				return this._projectLevel.Entity;
			}
			set
			{
				projectLevel previousValue = this._projectLevel.Entity;
				if (((previousValue != value) 
							|| (this._projectLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._projectLevel.Entity = null;
						previousValue.ProjectInstallments.Remove(this);
					}
					this._projectLevel.Entity = value;
					if ((value != null))
					{
						value.ProjectInstallments.Add(this);
						this._ProjectLevelID = value.id;
					}
					else
					{
						this._ProjectLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("projectLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.projectLevel")]
	public partial class projectLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _LevelName;
		
		private string _Descripotion;
		
		private System.Nullable<int> _ProjectProfileID;
		
		private System.Nullable<double> _LevelAmount;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<ProjectExpenss> _ProjectExpensses;
		
		private EntitySet<ProjectInstallment> _ProjectInstallments;
		
		private EntitySet<projectLevelSell> _projectLevelSells;
		
		private EntityRef<ProjectProfile> _ProjectProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    partial void OnDescripotionChanging(string value);
    partial void OnDescripotionChanged();
    partial void OnProjectProfileIDChanging(System.Nullable<int> value);
    partial void OnProjectProfileIDChanged();
    partial void OnLevelAmountChanging(System.Nullable<double> value);
    partial void OnLevelAmountChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public projectLevel()
		{
			this._ProjectExpensses = new EntitySet<ProjectExpenss>(new Action<ProjectExpenss>(this.attach_ProjectExpensses), new Action<ProjectExpenss>(this.detach_ProjectExpensses));
			this._ProjectInstallments = new EntitySet<ProjectInstallment>(new Action<ProjectInstallment>(this.attach_ProjectInstallments), new Action<ProjectInstallment>(this.detach_ProjectInstallments));
			this._projectLevelSells = new EntitySet<projectLevelSell>(new Action<projectLevelSell>(this.attach_projectLevelSells), new Action<projectLevelSell>(this.detach_projectLevelSells));
			this._ProjectProfile = default(EntityRef<ProjectProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="NVarChar(50)")]
		public string LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descripotion", DbType="NVarChar(MAX)")]
		public string Descripotion
		{
			get
			{
				return this._Descripotion;
			}
			set
			{
				if ((this._Descripotion != value))
				{
					this.OnDescripotionChanging(value);
					this.SendPropertyChanging();
					this._Descripotion = value;
					this.SendPropertyChanged("Descripotion");
					this.OnDescripotionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectProfileID", DbType="Int")]
		public System.Nullable<int> ProjectProfileID
		{
			get
			{
				return this._ProjectProfileID;
			}
			set
			{
				if ((this._ProjectProfileID != value))
				{
					if (this._ProjectProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectProfileID = value;
					this.SendPropertyChanged("ProjectProfileID");
					this.OnProjectProfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelAmount", DbType="Float")]
		public System.Nullable<double> LevelAmount
		{
			get
			{
				return this._LevelAmount;
			}
			set
			{
				if ((this._LevelAmount != value))
				{
					this.OnLevelAmountChanging(value);
					this.SendPropertyChanging();
					this._LevelAmount = value;
					this.SendPropertyChanged("LevelAmount");
					this.OnLevelAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projectLevel_ProjectExpenss", Storage="_ProjectExpensses", ThisKey="id", OtherKey="ProjectLevelID")]
		public EntitySet<ProjectExpenss> ProjectExpensses
		{
			get
			{
				return this._ProjectExpensses;
			}
			set
			{
				this._ProjectExpensses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projectLevel_ProjectInstallment", Storage="_ProjectInstallments", ThisKey="id", OtherKey="ProjectLevelID")]
		public EntitySet<ProjectInstallment> ProjectInstallments
		{
			get
			{
				return this._ProjectInstallments;
			}
			set
			{
				this._ProjectInstallments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projectLevel_projectLevelSell", Storage="_projectLevelSells", ThisKey="id", OtherKey="ProjectLevelID")]
		public EntitySet<projectLevelSell> projectLevelSells
		{
			get
			{
				return this._projectLevelSells;
			}
			set
			{
				this._projectLevelSells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectProfile_projectLevel", Storage="_ProjectProfile", ThisKey="ProjectProfileID", OtherKey="ID", IsForeignKey=true)]
		public ProjectProfile ProjectProfile
		{
			get
			{
				return this._ProjectProfile.Entity;
			}
			set
			{
				ProjectProfile previousValue = this._ProjectProfile.Entity;
				if (((previousValue != value) 
							|| (this._ProjectProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectProfile.Entity = null;
						previousValue.projectLevels.Remove(this);
					}
					this._ProjectProfile.Entity = value;
					if ((value != null))
					{
						value.projectLevels.Add(this);
						this._ProjectProfileID = value.ID;
					}
					else
					{
						this._ProjectProfileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectExpensses(ProjectExpenss entity)
		{
			this.SendPropertyChanging();
			entity.projectLevel = this;
		}
		
		private void detach_ProjectExpensses(ProjectExpenss entity)
		{
			this.SendPropertyChanging();
			entity.projectLevel = null;
		}
		
		private void attach_ProjectInstallments(ProjectInstallment entity)
		{
			this.SendPropertyChanging();
			entity.projectLevel = this;
		}
		
		private void detach_ProjectInstallments(ProjectInstallment entity)
		{
			this.SendPropertyChanging();
			entity.projectLevel = null;
		}
		
		private void attach_projectLevelSells(projectLevelSell entity)
		{
			this.SendPropertyChanging();
			entity.projectLevel = this;
		}
		
		private void detach_projectLevelSells(projectLevelSell entity)
		{
			this.SendPropertyChanging();
			entity.projectLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.projectLevelSell")]
	public partial class projectLevelSell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Sell_Item;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.DateTime> _DateOfSell;
		
		private string _Description;
		
		private string _Status;
		
		private System.Nullable<int> _ProjectLevelID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<projectLevel> _projectLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSell_ItemChanging(string value);
    partial void OnSell_ItemChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDateOfSellChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfSellChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnProjectLevelIDChanging(System.Nullable<int> value);
    partial void OnProjectLevelIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public projectLevelSell()
		{
			this._projectLevel = default(EntityRef<projectLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sell_Item", DbType="NVarChar(MAX)")]
		public string Sell_Item
		{
			get
			{
				return this._Sell_Item;
			}
			set
			{
				if ((this._Sell_Item != value))
				{
					this.OnSell_ItemChanging(value);
					this.SendPropertyChanging();
					this._Sell_Item = value;
					this.SendPropertyChanged("Sell_Item");
					this.OnSell_ItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSell", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfSell
		{
			get
			{
				return this._DateOfSell;
			}
			set
			{
				if ((this._DateOfSell != value))
				{
					this.OnDateOfSellChanging(value);
					this.SendPropertyChanging();
					this._DateOfSell = value;
					this.SendPropertyChanged("DateOfSell");
					this.OnDateOfSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectLevelID", DbType="Int")]
		public System.Nullable<int> ProjectLevelID
		{
			get
			{
				return this._ProjectLevelID;
			}
			set
			{
				if ((this._ProjectLevelID != value))
				{
					if (this._projectLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectLevelIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectLevelID = value;
					this.SendPropertyChanged("ProjectLevelID");
					this.OnProjectLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projectLevel_projectLevelSell", Storage="_projectLevel", ThisKey="ProjectLevelID", OtherKey="id", IsForeignKey=true)]
		public projectLevel projectLevel
		{
			get
			{
				return this._projectLevel.Entity;
			}
			set
			{
				projectLevel previousValue = this._projectLevel.Entity;
				if (((previousValue != value) 
							|| (this._projectLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._projectLevel.Entity = null;
						previousValue.projectLevelSells.Remove(this);
					}
					this._projectLevel.Entity = value;
					if ((value != null))
					{
						value.projectLevelSells.Add(this);
						this._ProjectLevelID = value.id;
					}
					else
					{
						this._ProjectLevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("projectLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.ProjectProfile")]
	public partial class ProjectProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ProjectName;
		
		private string _ProjectDescription;
		
		private System.Nullable<System.DateTime> _createdDate;
		
		private System.Nullable<System.DateTime> _DeliverDate;
		
		private System.Nullable<double> _ProjectFullAmount;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<int> _AccountID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<ProjectAttachment> _ProjectAttachments;
		
		private EntitySet<projectLevel> _projectLevels;
		
		private EntitySet<ProjectQuantity> _ProjectQuantities;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnProjectDescriptionChanging(string value);
    partial void OnProjectDescriptionChanged();
    partial void OncreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedDateChanged();
    partial void OnDeliverDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliverDateChanged();
    partial void OnProjectFullAmountChanging(System.Nullable<double> value);
    partial void OnProjectFullAmountChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public ProjectProfile()
		{
			this._ProjectAttachments = new EntitySet<ProjectAttachment>(new Action<ProjectAttachment>(this.attach_ProjectAttachments), new Action<ProjectAttachment>(this.detach_ProjectAttachments));
			this._projectLevels = new EntitySet<projectLevel>(new Action<projectLevel>(this.attach_projectLevels), new Action<projectLevel>(this.detach_projectLevels));
			this._ProjectQuantities = new EntitySet<ProjectQuantity>(new Action<ProjectQuantity>(this.attach_ProjectQuantities), new Action<ProjectQuantity>(this.detach_ProjectQuantities));
			this._Account = default(EntityRef<Account>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(50)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDescription", DbType="NVarChar(MAX)")]
		public string ProjectDescription
		{
			get
			{
				return this._ProjectDescription;
			}
			set
			{
				if ((this._ProjectDescription != value))
				{
					this.OnProjectDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProjectDescription = value;
					this.SendPropertyChanged("ProjectDescription");
					this.OnProjectDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliverDate", DbType="Date")]
		public System.Nullable<System.DateTime> DeliverDate
		{
			get
			{
				return this._DeliverDate;
			}
			set
			{
				if ((this._DeliverDate != value))
				{
					this.OnDeliverDateChanging(value);
					this.SendPropertyChanging();
					this._DeliverDate = value;
					this.SendPropertyChanged("DeliverDate");
					this.OnDeliverDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectFullAmount", DbType="Float")]
		public System.Nullable<double> ProjectFullAmount
		{
			get
			{
				return this._ProjectFullAmount;
			}
			set
			{
				if ((this._ProjectFullAmount != value))
				{
					this.OnProjectFullAmountChanging(value);
					this.SendPropertyChanging();
					this._ProjectFullAmount = value;
					this.SendPropertyChanged("ProjectFullAmount");
					this.OnProjectFullAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectProfile_ProjectAttachment", Storage="_ProjectAttachments", ThisKey="ID", OtherKey="ProjectProfileID")]
		public EntitySet<ProjectAttachment> ProjectAttachments
		{
			get
			{
				return this._ProjectAttachments;
			}
			set
			{
				this._ProjectAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectProfile_projectLevel", Storage="_projectLevels", ThisKey="ID", OtherKey="ProjectProfileID")]
		public EntitySet<projectLevel> projectLevels
		{
			get
			{
				return this._projectLevels;
			}
			set
			{
				this._projectLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectProfile_ProjectQuantity", Storage="_ProjectQuantities", ThisKey="ID", OtherKey="ProjectProfileID")]
		public EntitySet<ProjectQuantity> ProjectQuantities
		{
			get
			{
				return this._ProjectQuantities;
			}
			set
			{
				this._ProjectQuantities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_ProjectProfile", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.ProjectProfiles.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.ProjectProfiles.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ProjectProfile", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ProjectProfiles.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ProjectProfiles.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfile = this;
		}
		
		private void detach_ProjectAttachments(ProjectAttachment entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfile = null;
		}
		
		private void attach_projectLevels(projectLevel entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfile = this;
		}
		
		private void detach_projectLevels(projectLevel entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfile = null;
		}
		
		private void attach_ProjectQuantities(ProjectQuantity entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfile = this;
		}
		
		private void detach_ProjectQuantities(ProjectQuantity entity)
		{
			this.SendPropertyChanging();
			entity.ProjectProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="pro.ProjectQuantity")]
	public partial class ProjectQuantity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ItemID;
		
		private string _Qty;
		
		private System.Nullable<int> _ProjectProfileID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<BulidItem> _BulidItem;
		
		private EntityRef<ProjectProfile> _ProjectProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnQtyChanging(string value);
    partial void OnQtyChanged();
    partial void OnProjectProfileIDChanging(System.Nullable<int> value);
    partial void OnProjectProfileIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public ProjectQuantity()
		{
			this._BulidItem = default(EntityRef<BulidItem>);
			this._ProjectProfile = default(EntityRef<ProjectProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._BulidItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="NVarChar(50)")]
		public string Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectProfileID", DbType="Int")]
		public System.Nullable<int> ProjectProfileID
		{
			get
			{
				return this._ProjectProfileID;
			}
			set
			{
				if ((this._ProjectProfileID != value))
				{
					if (this._ProjectProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectProfileID = value;
					this.SendPropertyChanged("ProjectProfileID");
					this.OnProjectProfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BulidItem_ProjectQuantity", Storage="_BulidItem", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public BulidItem BulidItem
		{
			get
			{
				return this._BulidItem.Entity;
			}
			set
			{
				BulidItem previousValue = this._BulidItem.Entity;
				if (((previousValue != value) 
							|| (this._BulidItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BulidItem.Entity = null;
						previousValue.ProjectQuantities.Remove(this);
					}
					this._BulidItem.Entity = value;
					if ((value != null))
					{
						value.ProjectQuantities.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BulidItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectProfile_ProjectQuantity", Storage="_ProjectProfile", ThisKey="ProjectProfileID", OtherKey="ID", IsForeignKey=true)]
		public ProjectProfile ProjectProfile
		{
			get
			{
				return this._ProjectProfile.Entity;
			}
			set
			{
				ProjectProfile previousValue = this._ProjectProfile.Entity;
				if (((previousValue != value) 
							|| (this._ProjectProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectProfile.Entity = null;
						previousValue.ProjectQuantities.Remove(this);
					}
					this._ProjectProfile.Entity = value;
					if ((value != null))
					{
						value.ProjectQuantities.Add(this);
						this._ProjectProfileID = value.ID;
					}
					else
					{
						this._ProjectProfileID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _HistoryAction;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private string _ActionName;
		
		private string _Description;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHistoryActionChanging(string value);
    partial void OnHistoryActionChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    partial void OnActionNameChanging(string value);
    partial void OnActionNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public History()
		{
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryAction", DbType="NVarChar(4000)")]
		public string HistoryAction
		{
			get
			{
				return this._HistoryAction;
			}
			set
			{
				if ((this._HistoryAction != value))
				{
					this.OnHistoryActionChanging(value);
					this.SendPropertyChanging();
					this._HistoryAction = value;
					this.SendPropertyChanged("HistoryAction");
					this.OnHistoryActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionName", DbType="NVarChar(50)")]
		public string ActionName
		{
			get
			{
				return this._ActionName;
			}
			set
			{
				if ((this._ActionName != value))
				{
					this.OnActionNameChanging(value);
					this.SendPropertyChanging();
					this._ActionName = value;
					this.SendPropertyChanged("ActionName");
					this.OnActionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_History", Storage="_SystemUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.SystemPermession")]
	public partial class SystemPermession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SystemPermession1;
		
		private string _ObjectName;
		
		private string _propertyName;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<UserPermession> _UserPermessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSystemPermession1Changing(string value);
    partial void OnSystemPermession1Changed();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnpropertyNameChanging(string value);
    partial void OnpropertyNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public SystemPermession()
		{
			this._UserPermessions = new EntitySet<UserPermession>(new Action<UserPermession>(this.attach_UserPermessions), new Action<UserPermession>(this.detach_UserPermessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SystemPermession", Storage="_SystemPermession1", DbType="NVarChar(50)")]
		public string SystemPermession1
		{
			get
			{
				return this._SystemPermession1;
			}
			set
			{
				if ((this._SystemPermession1 != value))
				{
					this.OnSystemPermession1Changing(value);
					this.SendPropertyChanging();
					this._SystemPermession1 = value;
					this.SendPropertyChanged("SystemPermession1");
					this.OnSystemPermession1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectName", DbType="NVarChar(50)")]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectName = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_propertyName", DbType="NVarChar(50)")]
		public string propertyName
		{
			get
			{
				return this._propertyName;
			}
			set
			{
				if ((this._propertyName != value))
				{
					this.OnpropertyNameChanging(value);
					this.SendPropertyChanging();
					this._propertyName = value;
					this.SendPropertyChanged("propertyName");
					this.OnpropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemPermession_UserPermession", Storage="_UserPermessions", ThisKey="ID", OtherKey="SystemPermessionID")]
		public EntitySet<UserPermession> UserPermessions
		{
			get
			{
				return this._UserPermessions;
			}
			set
			{
				this._UserPermessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermessions(UserPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemPermession = this;
		}
		
		private void detach_UserPermessions(UserPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemPermession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.SystemUser")]
	public partial class SystemUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _pwd;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<UserPermession> _UserPermessions;
		
		private EntitySet<History> _Histories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnpwdChanging(string value);
    partial void OnpwdChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public SystemUser()
		{
			this._UserPermessions = new EntitySet<UserPermession>(new Action<UserPermession>(this.attach_UserPermessions), new Action<UserPermession>(this.detach_UserPermessions));
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pwd", DbType="NVarChar(50)")]
		public string pwd
		{
			get
			{
				return this._pwd;
			}
			set
			{
				if ((this._pwd != value))
				{
					this.OnpwdChanging(value);
					this.SendPropertyChanging();
					this._pwd = value;
					this.SendPropertyChanged("pwd");
					this.OnpwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_UserPermession", Storage="_UserPermessions", ThisKey="ID", OtherKey="SystemUserID")]
		public EntitySet<UserPermession> UserPermessions
		{
			get
			{
				return this._UserPermessions;
			}
			set
			{
				this._UserPermessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_History", Storage="_Histories", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermessions(UserPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_UserPermessions(UserPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
	}
}
#pragma warning restore 1591
